<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

	<modelVersion>4.0.0</modelVersion>
	<groupId>com.example.java</groupId>
	<artifactId>helloworld_microprofile_proxy</artifactId>
	<packaging>war</packaging>
	<version>0.2.0</version>

	<parent>
		<groupId>io.openliberty.tools</groupId>
		<artifactId>liberty-maven-app-parent</artifactId>
		<version>3.3.4</version>
	</parent>

	<!-- Override these with `mvn -D${PROPERTY}=${VALUE}` -->
	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<maven.compiler.source>1.8</maven.compiler.source>
		<maven.compiler.target>1.8</maven.compiler.target>
		<packaging.type>minify,runnable</packaging.type>

		<!-- https://search.maven.org/artifact/io.openliberty/openliberty-runtime -->
		<liberty.version>21.0.0.3</liberty.version>

		<!-- When changing a default here, it's usually good to change it in src/main/liberty/config/server.xml also. -->
		<liberty.var.APP_NAME>${project.artifactId}.war</liberty.var.APP_NAME>
		<liberty.var.HTTP_PORT>9081</liberty.var.HTTP_PORT>
		<liberty.var.HTTPS_PORT>9444</liberty.var.HTTPS_PORT>
		<liberty.var.TRACE_SPECIFICATION>*=info:com.example.java.jaxrs.resources.HelloWorldJAXRS=all</liberty.var.TRACE_SPECIFICATION>
		<liberty.var.MAX_TRACE_SIZE_MB>100</liberty.var.MAX_TRACE_SIZE_MB>
		<liberty.var.MAX_TRACE_SIZE_COUNT>2</liberty.var.MAX_TRACE_SIZE_COUNT>
		<liberty.var.MAX_REQUEST_SECONDS>5</liberty.var.MAX_REQUEST_SECONDS>
		<liberty.var.HUNG_REQUEST_SECONDS>300</liberty.var.HUNG_REQUEST_SECONDS>
		<liberty.var.REQUEST_TIMING_SAMPLE_RATE>1</liberty.var.REQUEST_TIMING_SAMPLE_RATE>

		<image.builder>docker</image.builder>
		<image.user>kgibm</image.user>
		<image.authors>kevin.grigorenko@us.ibm.com</image.authors>
		<image.name>${project.artifactId}</image.name>
		<image.summary>Hello World MicroProfile</image.summary>
		<image.vendor>${image.user}</image.vendor>
		<image.description>Example demonstrating a MicroProfile application</image.description>
		<image.url>https://github.com/kgibm/helloworld_microprofile_proxy</image.url>
		<image.source>https://github.com/kgibm/helloworld_microprofile_proxy</image.source>
	</properties>

	<profiles>
		<profile>
			<id>usr-package</id>
			<properties>
				<packaging.type>usr</packaging.type>
			</properties>
		</profile>
	</profiles>

	<dependencies>
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
			<version>4.0.0</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.eclipse.microprofile</groupId>
			<artifactId>microprofile</artifactId>
			<version>4.0</version>
			<type>pom</type>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.eclipse.microprofile.health</groupId>
			<artifactId>microprofile-health-api</artifactId>
			<version>3.0</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>jakarta.platform</groupId>
			<artifactId>jakarta.jakartaee-api</artifactId>
			<version>8.0.0</version>
			<scope>provided</scope>
		</dependency>

		<!-- Test -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.13.2</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.httpcomponents</groupId>
			<artifactId>httpclient</artifactId>
			<version>4.5.13</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter-engine</artifactId>
			<version>5.7.1</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.cxf</groupId>
			<artifactId>cxf-rt-rs-extension-providers</artifactId>
			<version>3.4.3</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.cxf</groupId>
			<artifactId>cxf-rt-rs-client</artifactId>
			<version>3.4.3</version>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<finalName>${project.artifactId}</finalName>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-war-plugin</artifactId>
				<version>3.3.1</version>
				<configuration>
					<packagingExcludes>pom.xml</packagingExcludes>
				</configuration>
			</plugin>
			<plugin>
				<groupId>io.openliberty.tools</groupId>
				<artifactId>liberty-maven-plugin</artifactId>
				<configuration>
					<assemblyArtifact>
						<groupId>io.openliberty</groupId>
						<artifactId>openliberty-runtime</artifactId>
						<version>${liberty.version}</version>
						<type>zip</type>
					</assemblyArtifact>
					<serverName>${project.artifactId}Server</serverName>
					<include>${packaging.type}</include>
					<mergeServerEnv>true</mergeServerEnv>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-failsafe-plugin</artifactId>
				<version>2.22.2</version>
				<configuration>
					<systemPropertyVariables>
						<HTTP_PORT>${liberty.var.HTTP_PORT}</HTTP_PORT>
						<HTTPS_PORT>${liberty.var.HTTPS_PORT}</HTTPS_PORT>
					</systemPropertyVariables>
				</configuration>
				<executions>
					<execution>
						<goals>
							<goal>integration-test</goal>
							<goal>verify</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<artifactId>maven-antrun-plugin</artifactId>
				<version>1.7</version>
				<executions>
					<execution>
						<phase>package</phase>
						<configuration>
							<target>
								<!-- exec: https://ant.apache.org/manual/Tasks/exec.html -->

								<!-- Get the git commit hash and put it into a variable for the next 
									command -->
								<exec dir="${project.basedir}" executable="git"
									failonerror="true" outputproperty="commit.id">
									<arg value="rev-parse" />
									<arg value="HEAD" />
								</exec>

								<!-- Run docker/podman build -->
								<echoxml>
									<exec dir="${project.basedir}"
										executable="${image.builder}" failonerror="true">
										<arg value="build" />
										<arg value="-t" />
										<arg
											value="${image.user}/${image.name}:${project.version}" />
										<arg value="-t" />
										<arg value="${image.user}/${image.name}:latest" />
										<arg value="--build-arg" />
										<arg value="VERSION=${project.version}" />
										<arg value="--build-arg" />
										<arg value="REVISION=${commit.id}" />
										<arg value="--build-arg" />
										<arg value="AUTHORS=${image.authors}" />
										<arg value="--build-arg" />
										<arg value="VENDOR=${image.vendor}" />
										<arg value="--build-arg" />
										<arg value="SUMMARY=${image.summary}" />
										<arg value="--build-arg" />
										<arg value="NAME=${image.name}" />
										<arg value="--build-arg" />
										<arg value="DESCRIPTION=${image.description}" />
										<arg value="--build-arg" />
										<arg value="URL=${image.url}" />
										<arg value="--build-arg" />
										<arg value="SOURCE=${image.source}" />
										<arg value="--build-arg" />
										<arg value="HTTP_PORT=${liberty.var.HTTP_PORT}" />
										<arg value="--build-arg" />
										<arg value="HTTPS_PORT=${liberty.var.HTTPS_PORT}" />
										<arg value="." />
									</exec>
								</echoxml>

								<exec dir="${project.basedir}"
									executable="${image.builder}" failonerror="true">
									<arg value="build" />
									<arg value="-t" />
									<arg value="${image.user}/${image.name}:${project.version}" />
									<arg value="-t" />
									<arg value="${image.user}/${image.name}:latest" />
									<arg value="--build-arg" />
									<arg value="VERSION=${project.version}" />
									<arg value="--build-arg" />
									<arg value="REVISION=${commit.id}" />
									<arg value="--build-arg" />
									<arg value="AUTHORS=${image.authors}" />
									<arg value="--build-arg" />
									<arg value="VENDOR=${image.vendor}" />
									<arg value="--build-arg" />
									<arg value="SUMMARY=${image.summary}" />
									<arg value="--build-arg" />
									<arg value="NAME=${image.name}" />
									<arg value="--build-arg" />
									<arg value="DESCRIPTION=${image.description}" />
									<arg value="--build-arg" />
									<arg value="URL=${image.url}" />
									<arg value="--build-arg" />
									<arg value="SOURCE=${image.source}" />
									<arg value="--build-arg" />
									<arg value="HTTP_PORT=${liberty.var.HTTP_PORT}" />
									<arg value="--build-arg" />
									<arg value="HTTPS_PORT=${liberty.var.HTTPS_PORT}" />
									<arg value="." />
								</exec>

								<echo
									message="Created ${image.user}/${image.name}:${project.version}" />
								<echo message="To push this image:" />
								<echo
									message="  ${image.builder} push ${image.user}/${image.name}:${project.version} &amp;&amp; ${image.builder} push ${image.user}/${image.name}:latest" />
								<echo message="==================" />
								<echo message="To run this image:" />
								<echo
									message="  ${image.builder} run --rm -p ${liberty.var.HTTP_PORT}:${liberty.var.HTTP_PORT} -p ${liberty.var.HTTPS_PORT}:${liberty.var.HTTPS_PORT} -it ${image.user}/${image.name}" />
							</target>
						</configuration>
						<goals>
							<goal>run</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
</project>
